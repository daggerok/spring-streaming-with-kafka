plugins {
    id 'idea'
    id 'base'
    id 'eclipse'
    //id 'com.avast.gradle.docker-compose' version '0.9.4'
    id 'org.springframework.boot' version '1.5.12.RELEASE' apply false
    id 'io.spring.dependency-management' version '1.0.8.RELEASE' apply false
}

allprojects {
    version = '3'
    group = 'con.daggerok'

    apply plugin: 'java'

    targetCompatibility = sourceCompatibility = JavaVersion.VERSION_1_8

    repositories {
        mavenCentral()
        jcenter()
    }
}

subprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        imports {
            mavenBom 'org.springframework.boot:spring-boot-dependencies:1.5.12.RELEASE'
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Brixton.RELEASE'
        }
    }

    springBoot { executable = true }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        compile 'org.springframework.cloud:spring-cloud-starter-stream-kafka'
        runtime 'org.springframework.boot:spring-boot-devtools'
        testCompile 'org.springframework.boot:spring-boot-starter-test'
    }
}

project(':Api') {
    jar.baseName = 'api'
    bootRepackage.enabled = false
    bootRun.enabled = false
}

project(':Greater') {
    jar.baseName = 'greater'
    dependencies { compile project(':Api') }
}

project(':MessagesReceiver') {
    jar.baseName = 'messages-receiver'
    test.dependsOn ':Greater:test'
    test.shouldRunAfter ':Greater:test'
}

project(':UpperCaser') {
    jar.baseName = 'upper-caser'
    dependencies { compile project(':Api') }
    test.dependsOn ':Greater:test'
    test.shouldRunAfter ':Greater:test'
}

project(':Doubler') {
    jar.baseName = 'doubler'
    test.dependsOn ':UpperCaser:test'
    test.shouldRunAfter ':UpperCaser:test'
}

project(':Logger') {
    jar.baseName = 'logger'
    test.dependsOn ':Doubler:test'
    test.shouldRunAfter ':Doubler:test'
}

/*
def dockerCompose = 'docker-compose -f kafka-docker/docker-compose-single-broker.yml'

task composeUp(type: Exec) {
    executable 'bash'
    args '-c', """
                    $dockerCompose down -v \
                    && $dockerCompose up -d --build \
                    && echo "waiting 15 seconds for kafka bootstrap..." \
                    && sleep 15
               """
}

task composeDown(type: Exec) {
    executable 'bash'
    args '-c', "$dockerCompose down -v"
}
*/

/*
dockerCompose {
  useComposeFiles = [project.file("$project.rootDir/kafka-docker/docker-compose-single-broker.yml")]
  // captureContainersOutput = true
  captureContainersOutput = false
  stopContainers = true
  removeContainers = true
  removeImages = "Local"
  removeVolumes = true
  removeOrphans = true
  forceRecreate = true
  waitForTcpPorts = false
  projectName = project.name
}

project.subprojects.each { subProject ->
    subProject.test.dependsOn composeUp
    subProject.test.finalizedBy composeDown
}

task wrapper(type: Wrapper) {
  gradleVersion = "4.7"
}
*/

test {
    // useJUnitPlatform() // comment this out to run spock specs!
    // see: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.logging.TestLoggingContainer.html
    testLogging {
        showExceptions = true
        showStandardStreams = true
        // set options for log level LIFECYCLE
        events 'passed', 'skipped', 'failed'
        // set options for log level DEBUG
        debug {
            events 'started', 'skipped', 'failed'
            exceptionFormat 'full'
        }
    }
}
